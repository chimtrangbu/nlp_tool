{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["listPOS","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","currentFile","current","words","result","fileName","window","location","pathname","split","pop","fetch","concat","then","res","text","sentence","includes","setState","parseInt","pos","_this2","prevState","push","length","blob","Blob","type","saveAs","e","_this3","map","word","i","react_default","a","createElement","key","className","choices","onClick","setPOS","bind","style","overflowWrap","React","Component","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5a7752d8.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport {saveAs} from 'file-saver';\n\nconst listPOS = [\"Noun\", \"Verb\"];\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentFile: 1,\n            current: 0,\n            words: [],\n            result: [],\n        };\n        let fileName = window.location.pathname.split(\"/\").pop(0);\n        fetch(`/nlp_tool/files/${fileName}.txt`)\n            .then(res => res.text())\n            .then(sentence => {\n                if (!sentence.includes(\"html\")) {\n                    this.setState({\n                        currentFile: parseInt(fileName),\n                        words: sentence.split(\" \"),\n                    })\n                } else {\n                    this.setState({\n                        currentFile: -1\n                    })\n                }\n            })\n    }\n\n    setPOS(pos) {\n        this.setState((prevState, props) => {\n            prevState.result.push(prevState.words[prevState.current] + \"\\t\" + pos + \"\\n\");\n\n            if (this.state.current === this.state.words.length - 1) {\n                let blob = new Blob(this.state.result, {type: \"text/plain;charset=utf-8\"});\n                saveAs(blob, `${this.state.currentFile}.txt`);\n                let currentFile = prevState.currentFile + 1;\n                try {\n                    window.location.pathname = `/nlp_tool/${currentFile}`;\n                    fetch(`/nlp_tool/files/${currentFile}.txt`)\n                        .then(res => res.text())\n                        .then(text => {\n                            if (text.includes(\"html\")) {\n                                this.setState({currentFile: -1})\n                            } else {\n                                this.setState({words: text.split(\" \")})\n                            }\n                        });\n                    return {\n                        currentFile: currentFile,\n                        current: 0,\n                        words: [],\n                        result: []\n                    }\n                } catch (e) {\n                    return {\n                        currentFile: -1,\n                        words: []\n                    }\n                }\n            } else return {\n                current: prevState.current + 1,\n                result: prevState.result,\n            }\n        });\n    }\n\n    render() {\n        let words = this.state.words.map((word, i) =>\n            i === this.state.current\n                ? <span key={i} className=\"text-danger ml-3\">{word}</span>\n                : <span key={i} className=\"ml-3\">{word}</span>\n        );\n        let choices = listPOS.map(pos =>\n            <button className=\"btn btn-primary mr-3\" key={pos} onClick={() => this.setPOS.bind(this)(pos)}>\n                {pos}\n            </button>\n        );\n\n        return (\n            <div className=\"container\">\n                <br/>\n                <div>\n                    File: {this.state.currentFile === -1 ? \"No more file\" : this.state.currentFile + \".txt\"}\n                </div>\n                Cau: <div style={{overflowWrap: \"break-word\"}}>{words}</div>\n                <p> Chon tu loai: </p>\n                {choices}\n            </div>\n        );\n    }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}