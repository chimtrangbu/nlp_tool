{"version":3,"sources":["config.js","App.js","serviceWorker.js","index.js"],"names":["posConfig","NN","NNP","VB","JJ","RB","IN","C","CD","UN","listPOS","Object","keys","config","App","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","currentFile","current","words","result","fileName","window","location","search","substr","fetch","concat","then","res","json","content","text","includes","setState","parseInt","handleContent","split","map","word","length","push","pos","_this2","prevState","blob","Blob","type","saveAs","e","_this3","i","react_default","a","createElement","key","className","choices","onClick","setPOS","bind","style","display","flexDirection","flexWrap","borderWidth","borderStyle","position","padding","bottom","left","maxWidth","zIndex","React","Component","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bbd936df.chunk.js","sourcesContent":["const posConfig = {\n    \"NN\": \"Danh t\\u1eeb chung\",\n    \"NNP\": \"Danh t\\u1eeb ri\\u00eang\",\n    \"VB\": \"\\u0110\\u1ED9ng t\\u1eeb\",\n    \"JJ\": \"T\\u00ednh t\\u1eeb\",\n    \"RB\": \"Tr\\u1EA1ng t\\u1eeb\",\n    \"IN\": \"Gi\\u1edbi t\\u1eeb\",\n    \"C\": \"Li\\u00ean t\\u1eeb\",\n    \"CD\": \"S\\u1ed1 t\\u1eeb\",\n    \"UN\": \"L\\u01b0\\u1ee3ng t\\u1eeb\",\n}\n\nexport default posConfig","import React from 'react';\nimport {saveAs} from 'file-saver';\nimport config from './config'\n\nconst listPOS = Object.keys(config);\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentFile: 1,\n            current: 0,\n            words: [],\n            result: [],\n        };\n        let fileName = window.location.search.substr(1);\n        fetch(`/nlp_tool/files/${fileName}.json`)\n            .then(res => res.json())\n            .then(content => {\n                if (!content.text.includes(\"html\")) {\n                    this.setState({\n                        currentFile: parseInt(fileName),\n                        words: this.handleContent(content.text),\n                    })\n                } else {\n                    this.setState({\n                        currentFile: -1\n                    })\n                }\n            })\n    }\n\n    handleContent(text) {\n        let words = [];\n        text.split(/(?:\\r|\\n| )+/).map(word => {\n            if (word.length > 0) {words.push(word)}\n        });\n        return words\n    }\n\n    setPOS(pos) {\n        this.setState((prevState, props) => {\n            prevState.result.push(prevState.words[prevState.current] + \"\\t\" + pos + \"\\n\");\n\n            if (this.state.current === this.state.words.length - 1) {\n                let blob = new Blob(this.state.result, {type: \"text/plain;charset=utf-8\"});\n                saveAs(blob, `${this.state.currentFile}.txt`);\n                let currentFile = prevState.currentFile + 1;\n                try {\n                    window.location.search = `?${currentFile}`;\n                    fetch(`/nlp_tool/files/${currentFile}.json`)\n                        .then(res => res.json())\n                        .then(text => {\n                            if (text.text.includes(\"html\")) {\n                                this.setState({currentFile: -1})\n                            } else {\n                                this.setState({words: text.text.split(\" \")})\n                            }\n                        });\n                    return {\n                        currentFile: currentFile,\n                        current: 0,\n                        words: [],\n                        result: []\n                    }\n                } catch (e) {\n                    return {\n                        currentFile: -1,\n                        words: []\n                    }\n                }\n            } else return {\n                current: prevState.current + 1,\n                result: prevState.result,\n            }\n        });\n    }\n\n    render() {\n        let words = this.state.words.map((word, i) =>\n            (<span key={i} className={i === this.state.current\n                                        ? \"btn-info font-weight-bold ml-3\"\n                                        : \"text-muted ml-3\"}>\n                {word}\n            </span>)\n        );\n        let choices = listPOS.map(pos =>\n            <button className=\"btn btn-outline-info m-2\"\n                    key={pos}\n                    onClick={() => this.setPOS.bind(this)(pos)}>\n                {config[pos]}\n            </button>\n        );\n\n        return (\n            <div className=\"container\">\n                <br/>\n                <h5 className=\"text-info\">\n                    File: {this.state.currentFile === -1\n                            ? \"No more file\"\n                            : this.state.currentFile + \".json\"}\n                </h5>\n                <div style={{display: \"flex\",\n                            flexDirection: \"row\",\n                            flexWrap: \"wrap\"}}>\n                    {words}\n                </div>\n                <br/>\n                <div style={{borderWidth:\"2px\",borderStyle:\"solid\",\n                            position:\"fixed\", padding:\"10px\",\n                            bottom:20, left:20,\n                            maxWidth:\"500px\", zIndex:999,\n                            display: \"flex\", flexDirection: \"column\",\n                            flexWrap: \"wrap\"}}>\n                    <p> Chon tu loai: </p>\n                    {choices}\n                </div>\n            </div>\n        );\n    }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}